// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String   @id @default(uuid())
  user_id    String   @unique
  username   String
  password   String
  email      String   @unique
  created_at DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @updatedAt

  sender_message   Message[]         @relation("sender")
  contact          Contact[]         @relation("contact")
  friends          Contact[]         @relation("friends")
  admin            Group[]           @relation("admin")
  group_membership GroupMembership[]
}

model Group {
  id               String            @id @default(uuid())
  name             String
  description      String?
  created_at       DateTime          @default(now()) @db.Timestamptz()
  admin            Users?              @relation("admin", fields: [admin_id], references: [user_id], onDelete: SetNull, map: "fk__Group__admin_id")
  admin_id         String?
  created_by_id    String
  group_membership GroupMembership[]
  message          Message[]
}

model GroupMembership {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk__GroupMembership__user_id")
  user_id   String
  group     Group    @relation(fields: [group_id], references: [id], onDelete: Cascade, map: "fk__GroupMembership__group_id")
  group_id  String
  joined_at DateTime @default(now()) @db.Timestamptz()

  @@unique([user_id, group_id])
}

model Message {
  id         String   @id @default(uuid())
  message    String
  group      Group?   @relation(fields: [group_id], references: [id], onDelete: Cascade, map: "fk__Message__group_id")
  group_id   String?
  contact    Contact? @relation(fields: [contact_id], references: [id], onDelete: Cascade, map: "fk__Message__contact_id")
  contact_id String?

  sender     Users    @relation("sender", fields: [sender_id], references: [user_id], onDelete: Cascade, map: "fk__Message__sender_id")
  sender_id  String
  sent_at    DateTime @default(now()) @db.Timestamptz()
  updated_at DateTime @updatedAt
}

model Contact {
  id         String    @id @default(uuid())
  user       Users     @relation("contact", fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk__Contact__user_id")
  user_id    String
  friends    Users     @relation("friends", fields: [friends_id], references: [user_id], onDelete: Cascade, map: "fk__Contact__friends_id")
  friends_id String
  message    Message[]

  @@unique([user_id, friends_id])
}
